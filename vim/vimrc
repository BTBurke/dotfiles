set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'fatih/vim-go'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Bundle 'cespare/vim-toml'
Bundle 'elzr/vim-json'
Plugin 'mxw/vim-jsx'
Plugin 'scrooloose/nerdcommenter'
Plugin 'mhinz/vim-sayonara'
Plugin 'majutsushi/tagbar'
Plugin 'SirVer/ultisnips'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'Valloric/YouCompleteMe'
Plugin 'pangloss/vim-javascript'
Plugin 'flowtype/vim-flow'
Plugin 'ensime/ensime-vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'leafgarland/typescript-vim'
call vundle#end()            " required
syntax on
filetype plugin indent on
:set expandtab
:set tabstop=2
:set softtabstop=2
:retab
:set shiftwidth=2
:set number
:set guioptions -=m " no menu in gvim
:set guioptions -=T " no icon bar in gvim
:set guioptions -=s " no scroll bar in gvim
:set guifont=Roboto\ Mono\ for\ Powerline\ 11
:set noswapfile
:set noerrorbells
:set backspace=indent,eol,start
:set showcmd
:set showmode
:set nobackup
:set splitright
:set splitbelow
:set encoding=utf-8
:set autowrite
:set autoread
:set hidden
:set laststatus=2
:set fileformats=unix,dos,mac
:set noshowmode
:set incsearch
:set hlsearch
:set ignorecase
:set smartcase
:set ttyfast
:set ttymouse=xterm2
:set ttyscroll=3
:set lazyredraw

" Leader
let mapleader=","

nmap <C-p> <plug>NERDCommenterInvert

" Navigation commands
nmap <C-j> :bnext<cr>
imap <C-j> <esc>:bnext<cr>
nmap <C-k> :bprev<cr>
imap <C-k> <esc>:bprev<cr>

" Enable Ctrl+v to paste from system clipboard
nmap <C-v> :set paste<cr>"*p:set nopaste<cr>
imap <C-v> <esc>:set paste<cr>"*p:set nopaste<cr>i

" noob mode save
imap <C-s> <esc>:w<cr>
nmap <C-s> :w<cr>

" Switch to normal with jk
imap jk <Esc>

" <F7> to re-indent the whole file
map <F7> mzgg=G`z<CR>

" Map the W to w on write for accidental shift
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
cnoreabbrev <expr> Q ((getcmdtype() is# ':' && getcmdline() is# 'Q')?('q'):('Q'))

set background=dark
colorscheme Kafka
:let g:airline_theme='base16_codeschool'

set omnifunc=syntaxcomplete#Complete
" speed up syntax highlighting
set nocursorcolumn
set nocursorline

syntax sync minlines=256
set synmaxcol=300
set re=1
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" set t_Co=256

" ===========================================================
" Rainbow parens config
" ===========================================================
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadBraces
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadChevrons

" ===========================================================
" Pangloss/Javascript
" ===========================================================
let g:javascript_plugin_flow = 1

" ===========================================================
" Airline configuration
" ===========================================================
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set laststatus=2

" ===========================================================
" NerdTree configuration
" ===========================================================
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" ===========================================================
" Vim-go configuration 
" ===========================================================
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" ===========================================================
" JSX syntax highlighting
" ===========================================================
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
let g:syntastic_javascript_checkers = ['eslint']

" ===========================================================
" Tagbar viewer
" ===========================================================
nmap <C-d> :TagbarToggle<CR>

" ===========================================================
" Sayonara
" ===========================================================
" smart buffer close, gets rid of shit without errors in smart way
nmap <C-q> :Sayonara<cr>


" ===========================================================
" Syntastic
" ===========================================================
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" ===========================================================
" UltiSnips
" ===========================================================
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsListSnippets="<c-tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-n>"
"let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" ===========================================================
" ensime
" ===========================================================
autocmd BufWritePost *.scala silent :EnTypeCheck
:let maplocalleader = "\\"
nnoremap <localleader>t :EnTypeCheck<CR>
